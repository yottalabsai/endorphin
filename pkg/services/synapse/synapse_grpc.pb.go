// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services/synapse/synapse.proto

package synapse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SynapseServiceClient is the client API for SynapseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynapseServiceClient interface {
	Call(ctx context.Context, opts ...grpc.CallOption) (SynapseService_CallClient, error)
}

type synapseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynapseServiceClient(cc grpc.ClientConnInterface) SynapseServiceClient {
	return &synapseServiceClient{cc}
}

func (c *synapseServiceClient) Call(ctx context.Context, opts ...grpc.CallOption) (SynapseService_CallClient, error) {
	stream, err := c.cc.NewStream(ctx, &SynapseService_ServiceDesc.Streams[0], "/yotta.services.synapse.SynapseService/Call", opts...)
	if err != nil {
		return nil, err
	}
	x := &synapseServiceCallClient{stream}
	return x, nil
}

type SynapseService_CallClient interface {
	Send(*YottaLabsStream) error
	Recv() (*YottaLabsStream, error)
	grpc.ClientStream
}

type synapseServiceCallClient struct {
	grpc.ClientStream
}

func (x *synapseServiceCallClient) Send(m *YottaLabsStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *synapseServiceCallClient) Recv() (*YottaLabsStream, error) {
	m := new(YottaLabsStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SynapseServiceServer is the server API for SynapseService service.
// All implementations should embed UnimplementedSynapseServiceServer
// for forward compatibility
type SynapseServiceServer interface {
	Call(SynapseService_CallServer) error
}

// UnimplementedSynapseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSynapseServiceServer struct {
}

func (UnimplementedSynapseServiceServer) Call(SynapseService_CallServer) error {
	return status.Errorf(codes.Unimplemented, "method Call not implemented")
}

// UnsafeSynapseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynapseServiceServer will
// result in compilation errors.
type UnsafeSynapseServiceServer interface {
	mustEmbedUnimplementedSynapseServiceServer()
}

func RegisterSynapseServiceServer(s grpc.ServiceRegistrar, srv SynapseServiceServer) {
	s.RegisterService(&SynapseService_ServiceDesc, srv)
}

func _SynapseService_Call_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SynapseServiceServer).Call(&synapseServiceCallServer{stream})
}

type SynapseService_CallServer interface {
	Send(*YottaLabsStream) error
	Recv() (*YottaLabsStream, error)
	grpc.ServerStream
}

type synapseServiceCallServer struct {
	grpc.ServerStream
}

func (x *synapseServiceCallServer) Send(m *YottaLabsStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *synapseServiceCallServer) Recv() (*YottaLabsStream, error) {
	m := new(YottaLabsStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SynapseService_ServiceDesc is the grpc.ServiceDesc for SynapseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynapseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yotta.services.synapse.SynapseService",
	HandlerType: (*SynapseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Call",
			Handler:       _SynapseService_Call_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/synapse/synapse.proto",
}
