// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/synapse/synapse_grpc.pb.go

// Package mock_synapse is a generated GoMock package.
package mock_synapse

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	synapse "github.com/yottalabsai/endorphin/pkg/services/synapse"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockSynapseServiceClient is a mock of SynapseServiceClient interface.
type MockSynapseServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSynapseServiceClientMockRecorder
}

// MockSynapseServiceClientMockRecorder is the mock recorder for MockSynapseServiceClient.
type MockSynapseServiceClientMockRecorder struct {
	mock *MockSynapseServiceClient
}

// NewMockSynapseServiceClient creates a new mock instance.
func NewMockSynapseServiceClient(ctrl *gomock.Controller) *MockSynapseServiceClient {
	mock := &MockSynapseServiceClient{ctrl: ctrl}
	mock.recorder = &MockSynapseServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSynapseServiceClient) EXPECT() *MockSynapseServiceClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSynapseServiceClient) Call(ctx context.Context, opts ...grpc.CallOption) (synapse.SynapseService_CallClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(synapse.SynapseService_CallClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockSynapseServiceClientMockRecorder) Call(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSynapseServiceClient)(nil).Call), varargs...)
}

// MockSynapseService_CallClient is a mock of SynapseService_CallClient interface.
type MockSynapseService_CallClient struct {
	ctrl     *gomock.Controller
	recorder *MockSynapseService_CallClientMockRecorder
}

// MockSynapseService_CallClientMockRecorder is the mock recorder for MockSynapseService_CallClient.
type MockSynapseService_CallClientMockRecorder struct {
	mock *MockSynapseService_CallClient
}

// NewMockSynapseService_CallClient creates a new mock instance.
func NewMockSynapseService_CallClient(ctrl *gomock.Controller) *MockSynapseService_CallClient {
	mock := &MockSynapseService_CallClient{ctrl: ctrl}
	mock.recorder = &MockSynapseService_CallClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSynapseService_CallClient) EXPECT() *MockSynapseService_CallClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSynapseService_CallClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSynapseService_CallClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSynapseService_CallClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockSynapseService_CallClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSynapseService_CallClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSynapseService_CallClient)(nil).Context))
}

// Header mocks base method.
func (m *MockSynapseService_CallClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockSynapseService_CallClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSynapseService_CallClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockSynapseService_CallClient) Recv() (*synapse.YottaLabsStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*synapse.YottaLabsStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSynapseService_CallClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSynapseService_CallClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSynapseService_CallClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSynapseService_CallClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSynapseService_CallClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSynapseService_CallClient) Send(arg0 *synapse.YottaLabsStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSynapseService_CallClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSynapseService_CallClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSynapseService_CallClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSynapseService_CallClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSynapseService_CallClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockSynapseService_CallClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockSynapseService_CallClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSynapseService_CallClient)(nil).Trailer))
}

// MockSynapseServiceServer is a mock of SynapseServiceServer interface.
type MockSynapseServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSynapseServiceServerMockRecorder
}

// MockSynapseServiceServerMockRecorder is the mock recorder for MockSynapseServiceServer.
type MockSynapseServiceServerMockRecorder struct {
	mock *MockSynapseServiceServer
}

// NewMockSynapseServiceServer creates a new mock instance.
func NewMockSynapseServiceServer(ctrl *gomock.Controller) *MockSynapseServiceServer {
	mock := &MockSynapseServiceServer{ctrl: ctrl}
	mock.recorder = &MockSynapseServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSynapseServiceServer) EXPECT() *MockSynapseServiceServerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSynapseServiceServer) Call(arg0 synapse.SynapseService_CallServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockSynapseServiceServerMockRecorder) Call(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSynapseServiceServer)(nil).Call), arg0)
}

// MockUnsafeSynapseServiceServer is a mock of UnsafeSynapseServiceServer interface.
type MockUnsafeSynapseServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSynapseServiceServerMockRecorder
}

// MockUnsafeSynapseServiceServerMockRecorder is the mock recorder for MockUnsafeSynapseServiceServer.
type MockUnsafeSynapseServiceServerMockRecorder struct {
	mock *MockUnsafeSynapseServiceServer
}

// NewMockUnsafeSynapseServiceServer creates a new mock instance.
func NewMockUnsafeSynapseServiceServer(ctrl *gomock.Controller) *MockUnsafeSynapseServiceServer {
	mock := &MockUnsafeSynapseServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSynapseServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSynapseServiceServer) EXPECT() *MockUnsafeSynapseServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSynapseServiceServer mocks base method.
func (m *MockUnsafeSynapseServiceServer) mustEmbedUnimplementedSynapseServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSynapseServiceServer")
}

// mustEmbedUnimplementedSynapseServiceServer indicates an expected call of mustEmbedUnimplementedSynapseServiceServer.
func (mr *MockUnsafeSynapseServiceServerMockRecorder) mustEmbedUnimplementedSynapseServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSynapseServiceServer", reflect.TypeOf((*MockUnsafeSynapseServiceServer)(nil).mustEmbedUnimplementedSynapseServiceServer))
}

// MockSynapseService_CallServer is a mock of SynapseService_CallServer interface.
type MockSynapseService_CallServer struct {
	ctrl     *gomock.Controller
	recorder *MockSynapseService_CallServerMockRecorder
}

// MockSynapseService_CallServerMockRecorder is the mock recorder for MockSynapseService_CallServer.
type MockSynapseService_CallServerMockRecorder struct {
	mock *MockSynapseService_CallServer
}

// NewMockSynapseService_CallServer creates a new mock instance.
func NewMockSynapseService_CallServer(ctrl *gomock.Controller) *MockSynapseService_CallServer {
	mock := &MockSynapseService_CallServer{ctrl: ctrl}
	mock.recorder = &MockSynapseService_CallServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSynapseService_CallServer) EXPECT() *MockSynapseService_CallServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockSynapseService_CallServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockSynapseService_CallServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSynapseService_CallServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockSynapseService_CallServer) Recv() (*synapse.YottaLabsStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*synapse.YottaLabsStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSynapseService_CallServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSynapseService_CallServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockSynapseService_CallServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockSynapseService_CallServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSynapseService_CallServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockSynapseService_CallServer) Send(arg0 *synapse.YottaLabsStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSynapseService_CallServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSynapseService_CallServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockSynapseService_CallServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockSynapseService_CallServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSynapseService_CallServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockSynapseService_CallServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockSynapseService_CallServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSynapseService_CallServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockSynapseService_CallServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockSynapseService_CallServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSynapseService_CallServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockSynapseService_CallServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockSynapseService_CallServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSynapseService_CallServer)(nil).SetTrailer), arg0)
}
