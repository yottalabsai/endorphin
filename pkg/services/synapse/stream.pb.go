// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: services/synapse/stream.proto

package synapse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YottaLabsStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`    // 客户端标识，当Register成功后，server返回给client
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                 // 时间戳
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // 请求ID， 用于幂等，谁发起消息，谁负责生成 message_id；
	// Types that are assignable to Payload:
	//
	//	*YottaLabsStream_Ping
	//	*YottaLabsStream_Pong
	//	*YottaLabsStream_RunModelMessage
	//	*YottaLabsStream_RunModelResult
	//	*YottaLabsStream_InferenceMessage
	//	*YottaLabsStream_InferenceResult
	//	*YottaLabsStream_TextToImageMessage
	//	*YottaLabsStream_TextToImageResult
	Payload isYottaLabsStream_Payload `protobuf_oneof:"payload"`
}

func (x *YottaLabsStream) Reset() {
	*x = YottaLabsStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YottaLabsStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YottaLabsStream) ProtoMessage() {}

func (x *YottaLabsStream) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YottaLabsStream.ProtoReflect.Descriptor instead.
func (*YottaLabsStream) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{0}
}

func (x *YottaLabsStream) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *YottaLabsStream) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *YottaLabsStream) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (m *YottaLabsStream) GetPayload() isYottaLabsStream_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *YottaLabsStream) GetPing() *PingMessage {
	if x, ok := x.GetPayload().(*YottaLabsStream_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *YottaLabsStream) GetPong() *PongResult {
	if x, ok := x.GetPayload().(*YottaLabsStream_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *YottaLabsStream) GetRunModelMessage() *RunModelMessage {
	if x, ok := x.GetPayload().(*YottaLabsStream_RunModelMessage); ok {
		return x.RunModelMessage
	}
	return nil
}

func (x *YottaLabsStream) GetRunModelResult() *RunModelResult {
	if x, ok := x.GetPayload().(*YottaLabsStream_RunModelResult); ok {
		return x.RunModelResult
	}
	return nil
}

func (x *YottaLabsStream) GetInferenceMessage() *InferenceMessage {
	if x, ok := x.GetPayload().(*YottaLabsStream_InferenceMessage); ok {
		return x.InferenceMessage
	}
	return nil
}

func (x *YottaLabsStream) GetInferenceResult() *InferenceResult {
	if x, ok := x.GetPayload().(*YottaLabsStream_InferenceResult); ok {
		return x.InferenceResult
	}
	return nil
}

func (x *YottaLabsStream) GetTextToImageMessage() *TextToImageMessage {
	if x, ok := x.GetPayload().(*YottaLabsStream_TextToImageMessage); ok {
		return x.TextToImageMessage
	}
	return nil
}

func (x *YottaLabsStream) GetTextToImageResult() *TextToImageResult {
	if x, ok := x.GetPayload().(*YottaLabsStream_TextToImageResult); ok {
		return x.TextToImageResult
	}
	return nil
}

type isYottaLabsStream_Payload interface {
	isYottaLabsStream_Payload()
}

type YottaLabsStream_Ping struct {
	Ping *PingMessage `protobuf:"bytes,4,opt,name=ping,proto3,oneof"`
}

type YottaLabsStream_Pong struct {
	Pong *PongResult `protobuf:"bytes,5,opt,name=pong,proto3,oneof"`
}

type YottaLabsStream_RunModelMessage struct {
	RunModelMessage *RunModelMessage `protobuf:"bytes,6,opt,name=run_model_message,json=runModelMessage,proto3,oneof"`
}

type YottaLabsStream_RunModelResult struct {
	RunModelResult *RunModelResult `protobuf:"bytes,7,opt,name=run_model_result,json=runModelResult,proto3,oneof"`
}

type YottaLabsStream_InferenceMessage struct {
	InferenceMessage *InferenceMessage `protobuf:"bytes,8,opt,name=inference_message,json=inferenceMessage,proto3,oneof"`
}

type YottaLabsStream_InferenceResult struct {
	InferenceResult *InferenceResult `protobuf:"bytes,9,opt,name=inference_result,json=inferenceResult,proto3,oneof"`
}

type YottaLabsStream_TextToImageMessage struct {
	TextToImageMessage *TextToImageMessage `protobuf:"bytes,10,opt,name=text_to_image_message,json=textToImageMessage,proto3,oneof"`
}

type YottaLabsStream_TextToImageResult struct {
	TextToImageResult *TextToImageResult `protobuf:"bytes,11,opt,name=text_to_image_result,json=textToImageResult,proto3,oneof"`
}

func (*YottaLabsStream_Ping) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_Pong) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_RunModelMessage) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_RunModelResult) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_InferenceMessage) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_InferenceResult) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_TextToImageMessage) isYottaLabsStream_Payload() {}

func (*YottaLabsStream_TextToImageResult) isYottaLabsStream_Payload() {}

type InferenceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature       float64        `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP              float64        `protobuf:"fixed64,2,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	MaxTokens         int32          `protobuf:"varint,3,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	FrequencyPenalty  float64        `protobuf:"fixed64,4,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	PresencePenalty   float64        `protobuf:"fixed64,5,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	RepetitionPenalty float64        `protobuf:"fixed64,6,opt,name=repetition_penalty,json=repetitionPenalty,proto3" json:"repetition_penalty,omitempty"`
	Model             string         `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	Messages          []*Message     `protobuf:"bytes,8,rep,name=messages,proto3" json:"messages,omitempty"`
	Stream            bool           `protobuf:"varint,9,opt,name=stream,proto3" json:"stream,omitempty"`
	StreamOptions     *StreamOptions `protobuf:"bytes,10,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
}

func (x *InferenceMessage) Reset() {
	*x = InferenceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceMessage) ProtoMessage() {}

func (x *InferenceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceMessage.ProtoReflect.Descriptor instead.
func (*InferenceMessage) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{1}
}

func (x *InferenceMessage) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *InferenceMessage) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *InferenceMessage) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *InferenceMessage) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *InferenceMessage) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *InferenceMessage) GetRepetitionPenalty() float64 {
	if x != nil {
		return x.RepetitionPenalty
	}
	return 0
}

func (x *InferenceMessage) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InferenceMessage) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *InferenceMessage) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *InferenceMessage) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUsage bool `protobuf:"varint,1,opt,name=include_usage,json=includeUsage,proto3" json:"include_usage,omitempty"`
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOptions.ProtoReflect.Descriptor instead.
func (*StreamOptions) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{3}
}

func (x *StreamOptions) GetIncludeUsage() bool {
	if x != nil {
		return x.IncludeUsage
	}
	return false
}

// 心跳消息
type PingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PingMessage) Reset() {
	*x = PingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingMessage) ProtoMessage() {}

func (x *PingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingMessage.ProtoReflect.Descriptor instead.
func (*PingMessage) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{4}
}

func (x *PingMessage) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type PongResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *PongResult) Reset() {
	*x = PongResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PongResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongResult) ProtoMessage() {}

func (x *PongResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongResult.ProtoReflect.Descriptor instead.
func (*PongResult) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{5}
}

func (x *PongResult) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// 启动模型
type RunModelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *RunModelMessage) Reset() {
	*x = RunModelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunModelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunModelMessage) ProtoMessage() {}

func (x *RunModelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunModelMessage.ProtoReflect.Descriptor instead.
func (*RunModelMessage) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{6}
}

func (x *RunModelMessage) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// 加载模型成功消息（没啥意义，可以不用做这个消息）
type RunModelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *RunModelResult) Reset() {
	*x = RunModelResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunModelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunModelResult) ProtoMessage() {}

func (x *RunModelResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunModelResult.ProtoReflect.Descriptor instead.
func (*RunModelResult) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{7}
}

func (x *RunModelResult) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Inference成功消息
type InferenceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InferenceResult) Reset() {
	*x = InferenceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceResult) ProtoMessage() {}

func (x *InferenceResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceResult.ProtoReflect.Descriptor instead.
func (*InferenceResult) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{8}
}

func (x *InferenceResult) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// text-to-image Request
type TextToImageMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt            float64 `protobuf:"fixed64,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	NumInferenceSteps float64 `protobuf:"fixed64,2,opt,name=numInferenceSteps,proto3" json:"numInferenceSteps,omitempty"`
	GuidanceScale     float64 `protobuf:"fixed64,3,opt,name=guidanceScale,proto3" json:"guidanceScale,omitempty"`
	LoraWeight        float64 `protobuf:"fixed64,4,opt,name=loraWeight,proto3" json:"loraWeight,omitempty"`
	Seed              int32   `protobuf:"varint,5,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (x *TextToImageMessage) Reset() {
	*x = TextToImageMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToImageMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToImageMessage) ProtoMessage() {}

func (x *TextToImageMessage) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToImageMessage.ProtoReflect.Descriptor instead.
func (*TextToImageMessage) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{9}
}

func (x *TextToImageMessage) GetPrompt() float64 {
	if x != nil {
		return x.Prompt
	}
	return 0
}

func (x *TextToImageMessage) GetNumInferenceSteps() float64 {
	if x != nil {
		return x.NumInferenceSteps
	}
	return 0
}

func (x *TextToImageMessage) GetGuidanceScale() float64 {
	if x != nil {
		return x.GuidanceScale
	}
	return 0
}

func (x *TextToImageMessage) GetLoraWeight() float64 {
	if x != nil {
		return x.LoraWeight
	}
	return 0
}

func (x *TextToImageMessage) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

// text-to-image Result
type TextToImageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TextToImageResult) Reset() {
	*x = TextToImageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_synapse_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToImageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToImageResult) ProtoMessage() {}

func (x *TextToImageResult) ProtoReflect() protoreflect.Message {
	mi := &file_services_synapse_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToImageResult.ProtoReflect.Descriptor instead.
func (*TextToImageResult) Descriptor() ([]byte, []int) {
	return file_services_synapse_stream_proto_rawDescGZIP(), []int{10}
}

func (x *TextToImageResult) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_services_synapse_stream_proto protoreflect.FileDescriptor

var file_services_synapse_stream_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x61, 0x70,
	0x73, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x22, 0x84, 0x06, 0x0a, 0x0f, 0x59, 0x6f, 0x74, 0x74,
	0x61, 0x4c, 0x61, 0x62, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x38, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x75,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x52,
	0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x6f,
	0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e,
	0x61, 0x70, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa8,
	0x03, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x6f, 0x74, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x34, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x27, 0x0a,
	0x0f, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x26, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2b,
	0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x72, 0x61, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x72, 0x61, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x6f, 0x74, 0x74, 0x61, 0x6c, 0x61, 0x62, 0x73, 0x61, 0x69, 0x2f, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x70, 0x68, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x73, 0x79, 0x6e, 0x61, 0x70, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_services_synapse_stream_proto_rawDescOnce sync.Once
	file_services_synapse_stream_proto_rawDescData = file_services_synapse_stream_proto_rawDesc
)

func file_services_synapse_stream_proto_rawDescGZIP() []byte {
	file_services_synapse_stream_proto_rawDescOnce.Do(func() {
		file_services_synapse_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_synapse_stream_proto_rawDescData)
	})
	return file_services_synapse_stream_proto_rawDescData
}

var file_services_synapse_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_services_synapse_stream_proto_goTypes = []interface{}{
	(*YottaLabsStream)(nil),    // 0: yotta.services.synapse.YottaLabsStream
	(*InferenceMessage)(nil),   // 1: yotta.services.synapse.InferenceMessage
	(*Message)(nil),            // 2: yotta.services.synapse.Message
	(*StreamOptions)(nil),      // 3: yotta.services.synapse.StreamOptions
	(*PingMessage)(nil),        // 4: yotta.services.synapse.PingMessage
	(*PongResult)(nil),         // 5: yotta.services.synapse.PongResult
	(*RunModelMessage)(nil),    // 6: yotta.services.synapse.RunModelMessage
	(*RunModelResult)(nil),     // 7: yotta.services.synapse.RunModelResult
	(*InferenceResult)(nil),    // 8: yotta.services.synapse.InferenceResult
	(*TextToImageMessage)(nil), // 9: yotta.services.synapse.TextToImageMessage
	(*TextToImageResult)(nil),  // 10: yotta.services.synapse.TextToImageResult
}
var file_services_synapse_stream_proto_depIdxs = []int32{
	4,  // 0: yotta.services.synapse.YottaLabsStream.ping:type_name -> yotta.services.synapse.PingMessage
	5,  // 1: yotta.services.synapse.YottaLabsStream.pong:type_name -> yotta.services.synapse.PongResult
	6,  // 2: yotta.services.synapse.YottaLabsStream.run_model_message:type_name -> yotta.services.synapse.RunModelMessage
	7,  // 3: yotta.services.synapse.YottaLabsStream.run_model_result:type_name -> yotta.services.synapse.RunModelResult
	1,  // 4: yotta.services.synapse.YottaLabsStream.inference_message:type_name -> yotta.services.synapse.InferenceMessage
	8,  // 5: yotta.services.synapse.YottaLabsStream.inference_result:type_name -> yotta.services.synapse.InferenceResult
	9,  // 6: yotta.services.synapse.YottaLabsStream.text_to_image_message:type_name -> yotta.services.synapse.TextToImageMessage
	10, // 7: yotta.services.synapse.YottaLabsStream.text_to_image_result:type_name -> yotta.services.synapse.TextToImageResult
	2,  // 8: yotta.services.synapse.InferenceMessage.messages:type_name -> yotta.services.synapse.Message
	3,  // 9: yotta.services.synapse.InferenceMessage.stream_options:type_name -> yotta.services.synapse.StreamOptions
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_services_synapse_stream_proto_init() }
func file_services_synapse_stream_proto_init() {
	if File_services_synapse_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_synapse_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YottaLabsStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PongResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunModelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunModelResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextToImageMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_synapse_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextToImageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_synapse_stream_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*YottaLabsStream_Ping)(nil),
		(*YottaLabsStream_Pong)(nil),
		(*YottaLabsStream_RunModelMessage)(nil),
		(*YottaLabsStream_RunModelResult)(nil),
		(*YottaLabsStream_InferenceMessage)(nil),
		(*YottaLabsStream_InferenceResult)(nil),
		(*YottaLabsStream_TextToImageMessage)(nil),
		(*YottaLabsStream_TextToImageResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_synapse_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_services_synapse_stream_proto_goTypes,
		DependencyIndexes: file_services_synapse_stream_proto_depIdxs,
		MessageInfos:      file_services_synapse_stream_proto_msgTypes,
	}.Build()
	File_services_synapse_stream_proto = out.File
	file_services_synapse_stream_proto_rawDesc = nil
	file_services_synapse_stream_proto_goTypes = nil
	file_services_synapse_stream_proto_depIdxs = nil
}
