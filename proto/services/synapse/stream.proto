syntax = "proto3";

package yotta.services.synapse;

option go_package = "github.com/yottalabsai/endorphin/pkg/services/synapse";

message YottaLabsStream {
  string client_id = 1;         // 客户端标识，当Register成功后，server返回给client
  int64 timestamp = 2;          // 时间戳
  string message_id = 3;        // 请求ID， 用于幂等，谁发起消息，谁负责生成 message_id；
  oneof payload {// 不同类型payload，可以扩展各种不同消息类型， 本身就是可选，可能是nil
    PingMessage ping = 4;
    PongResult  pong = 5;
    RunModelMessage run_model_message = 6;
    RunModelResult run_model_result = 7;
    InferenceMessage inference_message = 8;
    InferenceResult inference_result = 9;
  }
}

message InferenceMessage {
  uint32 frequency_penalty = 1;
  uint32 max_tokens = 2;
  string model = 3;
  repeated Messages messages = 4;
  bool stream = 5;
  Stream_options stream_options = 6;
}
message Messages {
  string role = 1;
  string content = 2;
}
message Stream_options {
  bool include_usage = 1;
}


// 心跳消息
message PingMessage {
  int64 sequence = 1;
}

message PongResult {
  int64 sequence = 1;
}

// 启动模型
message RunModelMessage {
  string model = 1;
}

// 加载模型成功消息（没啥意义，可以不用做这个消息）
message RunModelResult {
  string model = 1;
}

// Inference成功消息
message InferenceResult {
  string content = 1;
}